import jax
import jax.numpy as jnp
from jax import vmap
from jax.lax import dynamic_slice
import matplotlib.pyplot as plt
import seaborn as sns

import jax
import jax.numpy as jnp
from jax import vmap
from jax.lax import dynamic_slice
from functools import partial

def make_sliding_regression_with_penalty_fn(
    X,
    Y,
    window_size,
    stride,
    n_outputs,
    layers,
    penalty_strength=0.0,
    threshold=None,
    freeze_non_masked=False,
    equal_opposite_constraints=None,
):
    n_samples, n_features = X.shape
    n_windows = (n_samples - window_size) // stride + 1

    def get_window(X, i):
        return dynamic_slice(X, (i * stride, 0), (window_size, X.shape[1]))

    def get_window_Y(Y, i):
        return dynamic_slice(Y, (i * stride, 0), (window_size, Y.shape[1]))

    @jax.jit
    def ols_kernel(X_win, Y_win):
        XtX = jnp.einsum('ni,nj->ij', X_win, X_win)
        XtY = jnp.einsum('ni,nj->ij', X_win, Y_win)
        return jnp.linalg.solve(XtX + 1e-6 * jnp.eye(X_win.shape[1]), XtY)

    W_layers = []
    r2_layers = []

    residual = Y

    for layer_config in layers:
        X_wins = vmap(get_window, in_axes=(None, 0))(X, jnp.arange(n_windows))
        Y_wins = vmap(get_window_Y, in_axes=(None, 0))(residual, jnp.arange(n_windows))

        W = vmap(ols_kernel)(X_wins, Y_wins)  # (n_windows, n_features, n_outputs)

        # Apply thresholding logic if provided
        if threshold is not None:
            penalty_mask = jnp.abs(W) < threshold  # (n_windows, n_features, n_outputs)
        else:
            penalty_mask = jnp.zeros_like(W, dtype=bool)

        # Apply equal-opposite constraints
        if equal_opposite_constraints:
            for i, j in equal_opposite_constraints:
                W = W.at[:, j, :].set(-W[:, i, :])

        if penalty_strength > 0.0:
            # Create a feature-wise penalty mask by checking if all output weights
            # for a given feature are below the threshold in each window.
            feature_penalty_mask = jnp.all(penalty_mask, axis=-1)  # (n_windows, n_features)

            # Construct a diagonal penalty term to add to XtX
            penalty_diag_values = feature_penalty_mask.astype(float) * penalty_strength
            penalty_term = jnp.einsum('nf,fg->nfg', penalty_diag_values, jnp.eye(n_features)) # (n_windows, n_features, n_features)

            XtX = jnp.einsum('nwf,nwg->nfg', X_wins, X_wins)  # (n_windows, n_features, n_features)
            XtY = jnp.einsum('nwf,nwo->nfo', X_wins, Y_wins)  # (n_windows, n_features, n_outputs)

            W_pen = jnp.linalg.solve(XtX + penalty_term, XtY) # (n_windows, n_features, n_outputs)

            # Apply freezing based on the original penalty mask
            W_final = jnp.where(penalty_mask, W_pen, W if freeze_non_masked else W_pen)
        else:
            W_final = W

        Y_preds = jnp.einsum('nwf,nfo->nwo', X_wins, W_final)
        ss_res = jnp.sum((Y_wins - Y_preds) ** 2, axis=1)
        ss_tot = jnp.sum((Y_wins - jnp.mean(Y_wins, axis=1, keepdims=True)) ** 2, axis=1)
        r2 = 1.0 - (ss_res / (ss_tot + 1e-8))

        residual = residual - jnp.concatenate([Y_preds[i] for i in range(n_windows)], axis=0)[:residual.shape[0]]

        W_layers.append(W_final)
        r2_layers.append(r2)

    return W_layers, r2_layers

# Example usage
if __name__ == '__main__':
    key = jax.random.PRNGKey(0)
    n_samples, n_features, n_outputs = 100, 5, 4
    X = jax.random.normal(key, (n_samples, n_features))
    true_W = jax.random.normal(key, (n_features, n_outputs))
    Y = X @ true_W + 0.01 * jax.random.normal(jax.random.PRNGKey(1), (n_samples, n_outputs))

    print("--- Plain OLS ---")
    weights_ols, r2s_ols = make_sliding_regression_with_penalty_fn(
        X, Y,
        window_size=20,
        stride=5,
        n_outputs=n_outputs,
        layers=[{"layer": 1}]
    )
    print(r2s_ols[0])

    print("--- Penalized with Threshold and Freeze ---")
    weights_pen, r2s_pen = make_sliding_regression_with_penalty_fn(
        X, Y,
        window_size=20,
        stride=5,
        n_outputs=n_outputs,
        layers=[{"layer": 1}],
        threshold=0.1,
        penalty_strength=1e3,
        freeze_non_masked=True
    )
    print(r2s_pen[0])

    print("--- Equal-Opposite Constraint + Multi-Layer ---")
    weights_multi, r2s_multi = make_sliding_regression_with_penalty_fn(
        X, Y,
        window_size=20,
        stride=5,
        n_outputs=n_outputs,
        layers=[{"layer": 1}, {"layer": 2}],
        threshold=0.05,
        penalty_strength=500.0,
        freeze_non_masked=True,
        equal_opposite_constraints=[(0, 1)]
    )
    for i, r2 in enumerate(r2s_multi):
        print(f"Layer {i + 1} R²:", r2)

def make_sliding_regression_with_penalty_fn(
    X,
    Y,
    window_size,
    stride,
    n_outputs,
    layers,
    penalty_strength=0.0,
    threshold=None,
    freeze_non_masked=False,
    equal_opposite_constraints=None,
):
    n_samples, n_features = X.shape
    n_windows = (n_samples - window_size) // stride + 1

    def get_window(X, i):
        return dynamic_slice(X, (i * stride, 0), (window_size, X.shape[1]))

    def get_window_Y(Y, i):
        return dynamic_slice(Y, (i * stride, 0), (window_size, Y.shape[1]))

    @jax.jit
    def ols_kernel(X_win, Y_win):
        XtX = jnp.einsum("ni,nj->ij", X_win, X_win)
        XtY = jnp.einsum("ni,nj->ij", X_win, Y_win)
        return jnp.linalg.solve(XtX + 1e-6 * jnp.eye(X_win.shape[1]), XtY)

    W_layers = []
    r2_layers = []
    residual = Y

    for _ in layers:
        X_wins = vmap(get_window, in_axes=(None, 0))(X, jnp.arange(n_windows))
        Y_wins = vmap(get_window_Y, in_axes=(None, 0))(residual, jnp.arange(n_windows))

        W = vmap(ols_kernel)(X_wins, Y_wins)  # (n_windows, n_features, n_outputs)

        penalty_mask = jnp.abs(W) < threshold if threshold is not None else jnp.zeros_like(W, dtype=bool)

        if equal_opposite_constraints:
            for i, j in equal_opposite_constraints:
                W = W.at[:, j, :].set(-W[:, i, :])

        if penalty_strength > 0.0:
            feature_penalty_mask = jnp.all(penalty_mask, axis=-1)  # (n_windows, n_features)
            penalty_diag = jnp.einsum('nf,fg->nfg', feature_penalty_mask.astype(float) * penalty_strength, jnp.eye(n_features))
            XtX = jnp.einsum("nwf,nwg->nfg", X_wins, X_wins)
            XtY = jnp.einsum("nwf,nwo->nfo", X_wins, Y_wins)
            W_pen = jnp.linalg.solve(XtX + penalty_diag, XtY)

            W_final = jnp.where(penalty_mask, W_pen, W if freeze_non_masked else W_pen)
        else:
            W_final = W

        Y_preds = jnp.einsum("nwf,nfo->nwo", X_wins, W_final)
        ss_res = jnp.sum((Y_wins - Y_preds) ** 2, axis=(1, 2))
        ss_tot = jnp.sum((Y_wins - jnp.mean(Y_wins, axis=1, keepdims=True)) ** 2, axis=(1, 2))
        r2 = 1.0 - (ss_res / (ss_tot + 1e-8))

        stacked_preds = jnp.concatenate([Y_preds[i] for i in range(n_windows)], axis=0)[:residual.shape[0]]
        residual = residual - stacked_preds

        W_layers.append(W_final)
        r2_layers.append(r2)

    return W_layers, r2_layers

key = jax.random.PRNGKey(0)
n_samples, n_features, n_outputs = 100, 5, 4
X = jax.random.normal(key, (n_samples, n_features))
true_W = jax.random.normal(key, (n_features, n_outputs))
Y = X @ true_W + 0.01 * jax.random.normal(jax.random.PRNGKey(1), (n_samples, n_outputs))

def run_and_log(name, **kwargs):
    print(f"\n=== {name} ===")
    W_layers, R2_layers = make_sliding_regression_with_penalty_fn(X, Y, window_size=20, stride=5, n_outputs=n_outputs, layers=[{"layer": 1}], **kwargs)
    print("R² by window:", R2_layers[0])
    return name, R2_layers

results = []
results.append(run_and_log("Plain OLS"))

results.append(run_and_log("Thresholded", threshold=0.1))

results.append(run_and_log("Threshold + Penalty", threshold=0.1, penalty_strength=1000.0))

results.append(run_and_log("Threshold + Penalty + Freeze", threshold=0.1, penalty_strength=1000.0, freeze_non_masked=True))

results.append(run_and_log("Equal-Opposite + Penalty", threshold=0.1, penalty_strength=500.0, equal_opposite_constraints=[(0, 1)]))

import pandas as pd

def plot_r2_by_window(results):
    all_data = []
    for name, r2s in results:
        for i, r2 in enumerate(r2s[0]):
            all_data.append({"Config": name, "Window": i, "R²": float(r2)})
    df = pd.DataFrame(all_data)

    plt.figure(figsize=(12, 5))
    sns.lineplot(data=df, x="Window", y="R²", hue="Config", marker="o")
    plt.title("R² by Window")
    plt.grid(True)
    plt.tight_layout()
    plt.show()

plot_r2_by_window(results)
